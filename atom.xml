<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jerrywang.top</id>
    <title>JY Blog</title>
    <updated>2020-07-27T16:26:06.925Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jerrywang.top"/>
    <link rel="self" href="https://jerrywang.top/atom.xml"/>
    <subtitle>分享知识与爱</subtitle>
    <logo>https://jerrywang.top/images/avatar.png</logo>
    <icon>https://jerrywang.top/favicon.ico</icon>
    <rights>All rights reserved 2020, JY Blog</rights>
    <entry>
        <title type="html"><![CDATA[Notion+Gridea搭建博客]]></title>
        <id>https://jerrywang.top/Notion+Gridea搭建博客/</id>
        <link href="https://jerrywang.top/Notion+Gridea搭建博客/">
        </link>
        <updated>2020-07-24T01:46:00.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[云服务器搭建RSSHUB]]></title>
        <id>https://jerrywang.top/云服务器搭建RSSHUB/</id>
        <link href="https://jerrywang.top/云服务器搭建RSSHUB/">
        </link>
        <updated>2020-07-23T20:34:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="rsshub是什么">RSSHUB是什么</h1>
<p>RSSHUB是一个容易操作的自定义rss源的开源应用，集成了很多热门的信息源，可以即时生成自己所需要的rss信息订阅源。<br>
虽然rsshub有提供官方的免费rss源接口，但是更加有效（很多网站反爬）、更加安全（使用自己账号的token更加安全）的是自己在服务器上部署rsshub订阅源。于是我在腾讯学生云服务器上部署了这一应用，具体过程如下。</p>
<h1 id="安装docker-ce和docker-compose">安装docker-ce和docker-compose</h1>
<p>不得不说，docker真的给应用的部署带来了巨大的方便。我用的是Debian 9 系统，依次输入以下的代码安装docker-ce和docker-compose</p>
<pre><code class="language-Plain">sudo apt-get remove docker docker-engine docker.io
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/debian \
   $(lsb_release -cs) \
   stable&quot;
sudo apt-get update
sudo apt-get install docker-ce
curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
</code></pre>
<p>更详细安装内容可见<a href="http://jerrywang.top/2020/04/08/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA-sharelatex-%E5%8D%8F%E4%BD%9C%E6%9C%8D%E5%8A%A1%E5%99%A8/">本地搭建sharelatex协作服务器</a></p>
<h1 id="下载docker-composeyml">下载docker-compose.yml</h1>
<p>文件地址为<a href="https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml">docker-compose.yml</a><br>
运行以下的命令</p>
<pre><code class="language-Plain">wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml
docker-compose up
</code></pre>
<p>此时打开“http://服务器的ip:1200”，若出现rsshub的图标和相关信息，则表示安装成功。<br>
安装成功后，rss订阅源为http://服务器的ip:1200/文档中所说明的路由</p>
<h1 id="我在用的几个路由">我在用的几个路由</h1>
<p>rsshub的文档中提供了很多路由，路由的意思即是对应的rss源的路径，加在rsshub运行地址的后面即可。然而rsshub中有很多路由，并不是所有的我们都用得上，这里我总结一下自己常用的路由。<br>
<strong>微信公众号</strong><br>
微信公众号可谓是相当重要的一个信息获得渠道了。rsshub提供了很多个微信公众号的路由，我目前用的是二十次幂的来源，这个来源理论上包括所有的公众号，还可以通过添加参数输出公众号的全文。<br>
在<a href="https://www.ershicimi.com/">二十次幂的网站</a>查找公众号，如果搜索不到，则可以自主添加。打开公众号的主页，在URL中找到对应的公众号id，例如，CSDN公众号的id为204<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586676723651.png" alt="" loading="lazy"><br>
UTOOLS1586676723651.png<br>
那么，对应的rss订阅源为<code>http://服务器ip:rsshub端口/wechat/ershicimi/204</code>，若想添加为全文输入，则在后面加入<code>?mode=fulltext</code>，即<code>http://服务器ip:rsshub端口/wechat/ershicimi/204?mode=fulltext</code><br>
<strong>微博</strong><br>
我常用的是某个博主的微博，在电脑上打开微博官网，找到某个博主，在URL中找到其id，例如：蔡徐坤的微博id为caizicaixukun。<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586677728283.png" alt="" loading="lazy"><br>
UTOOLS1586677728283.png<br>
那么，对应的rss订阅源为http://服务器ip:rsshub端口/weibo/user/caizicaixukun/1，后面的1表示输出视频。<br>
<strong>其他</strong><br>
除此之外，我还使用了一些不需要配置具体信息的rss订阅源，相当于通过rsshub爬去信息，具体如下：<br>
切记，在google已经放弃rss当下，使用rss的目的是为了减少被巨量的信息所冲击，添加太多的rss源不利于信息整理。<br>
更多信息的rss源路由，详见<a href="https://docs.rsshub.app/">rsshub官方文档</a>。</p>
<h1 id="参考文献">参考文献</h1>
<ol>
<li><a href="https://www.jianshu.com/p/83483c35bfcd">ubuntu 18.04 安装docker ce</a></li>
<li><a href="https://github.com/docker/compose/releases">docker-compose releases页面</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学生云服务器用来做什么]]></title>
        <id>https://jerrywang.top/学生云服务器用来做什么/</id>
        <link href="https://jerrywang.top/学生云服务器用来做什么/">
        </link>
        <updated>2020-07-23T20:34:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="为什么会考虑这个问题">为什么会考虑这个问题</h1>
<p>严格地说，本人并不是计算机专业的学生，学习了这么多关于计算机的知识纯粹是兴趣使然。一次在计量课上，老师提到了在服务器上进行大规模计算，并且说这将成为一种趋势，对云计算一无所知的我对此突然产生了浓厚的兴趣，从此便一发不可收拾，从对linux存在恐惧到现在用docker部署自己的应用，磕磕绊绊踩了很多坑，不过也算是学了一点东西，稍微有点成就罢了。</p>
<h1 id="用服务器踩过的坑">用服务器踩过的坑</h1>
<p><strong>在线jupyer notebook</strong><br>
搭建jupyter notebook服务器，可以在远程服务器上写代码，不用耗费本地资源，云端同步协作。后来觉得1核的服务器无法写多核并行代码，就放弃了。<br>
<strong>sharelatex在线协作</strong><br>
在远程服务器上和同学一起写latex，后来还是觉得云服务器配置太低，选择了本地虚拟机部署。详见<a href="http://jerrywang.top/2020/04/08/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA-sharelatex-%E5%8D%8F%E4%BD%9C%E6%9C%8D%E5%8A%A1%E5%99%A8/">本地搭建sharelatex写作服务器</a></p>
<h1 id="现在服务器的用途">现在服务器的用途</h1>
<p><strong>自建dns解析服务器</strong><br>
用Adguard Home部署自己的dns解析器，可以自定义过滤规则，一方面可以减少广告，另一方面可以一定程度上防止dns污染（顺利访问github)。参见：<a href="http://jerrywang.top/2020/04/10/%E7%94%A8-Adguard-Home-%E8%87%AA%E5%BB%BA-DNS-%E6%9C%8D%E5%8A%A1%E5%99%A8/">Adguardhome自建dns服务器</a><br>
<strong>自建rsshub订阅源</strong><br>
rss，即Really Simple Syndication，简易信息聚合。在这个信息爆炸的时代，通过自定义rss源来高效地获取自己想访问的信息，rsshub即是这个开源的应用。参见<a href="http://jerrywang.top/2020/04/12/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%90%AD%E5%BB%BA-RSSHUB/">云服务器搭建RSSHUB</a><br>
<strong>自建tt rss阅读web服务器</strong><br>
在建立rss订阅源的基础上，再建立一个rss阅读的开源web应用，支持更加个性化的定制，这样就可以在不深入研究底层代码的情况下最大化个性化自己的需求。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[hello-gridea]]></title>
        <id>https://jerrywang.top/hello-gridea/</id>
        <link href="https://jerrywang.top/hello-gridea/">
        </link>
        <updated>2020-07-23T20:34:33.000Z</updated>
        <content type="html"><![CDATA[<p>👏 欢迎使用 <strong>Gridea</strong> ！<br>
✍️ <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意… …<br>
<a href="https://github.com/getgridea/gridea">Github</a><a href="https://gridea.dev/">Gridea 主页</a><a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝 你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作<br>
🌉 你可以给文章配上精美的封面图和在文章任意位置插入图片<br>
🏷️ 你可以对文章进行标签分组<br>
📋 你可以自定义菜单，甚至可以创建外部链接菜单<br>
💻 你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端<br>
🌎 你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台<br>
💬 你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统<br>
🇬🇧 你可以使用<strong>中文简体</strong>或<strong>英语</strong><br>
🌁 你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力<br>
🖥 你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步<br>
🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃<br>
未来，它一定会成为你离不开的伙伴<br>
尽情发挥你的才华吧！<br>
😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[deepin实现远程桌面控制]]></title>
        <id>https://jerrywang.top/deepin实现远程桌面控制/</id>
        <link href="https://jerrywang.top/deepin实现远程桌面控制/">
        </link>
        <updated>2020-07-23T20:34:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言为什么要远程桌面控制">前言：为什么要远程桌面控制</h1>
<ol>
<li>电脑无法携带或者不方便携带</li>
<li>电脑电池容量太小，无法携带到没有充电的地方，又不想买新的，而通过平板电脑远程访问。（我）<br>
对于远程桌面访问，一开始测试过现有的工具：TeamViewer和向日葵，但是最后都放弃了。因为：</li>
<li>TeamViewer的登录服务器在国内响应不好，平板电脑总（华为M5 pro）是登录不上。</li>
<li>向日葵感觉对linux的优化不够好，或者是宽带太小，买了入门版的还是很卡。<br>
最后测试到了RealVNC，并且折腾成功。</li>
</ol>
<h1 id="安装realvnc-server">安装RealVNC server</h1>
<p>VNC其实算是一个比较古老的远程控制linux桌面的软件，后来因为某些原因分了家（具体我不太清楚）。目前市面上有RealVNC、tiger VNC、X11VNC等VNC软件。没有特殊标示的软件就是Real VNC，而且最开始VNC团队的一部分成员进入了Real VNC，感觉官方性最强，于是选择了这个软件。<br>
安装VNC很简单，直接打开deepin应用商店，搜索VNC，点击安装就可以了，我们要在被控制端控制端安装VNC server，不安装VNC viewer。<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1587187504036.png" alt="" loading="lazy"><br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1587187527703.png" alt="" loading="lazy"></p>
<h3 id="激活vnc">激活VNC</h3>
<p>vnc server并不是免费的软件，需要购买，还好有热心网友分享了激活码，大家可以去评论区找。</p>
<h3 id="设置vnc">设置VNC</h3>
<p>打开vnc server，需要sudo权限，输入密码后，点击右上角三个横杠，选择Options<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1587187549976.png" alt="" loading="lazy"><br>
会看到这个界面<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1587187576831.png" alt="" loading="lazy"></p>
<ol>
<li>把Security中的Authrntication改成VNC passwd而不是UNIX passwd（保护你的计算机，防止root密码泄露）</li>
<li>在User &amp; Permissions中点击Add添加用户admin用户（如果只有你一个人用</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adguardhome自建dns服务器]]></title>
        <id>https://jerrywang.top/Adguardhome自建dns服务器/</id>
        <link href="https://jerrywang.top/Adguardhome自建dns服务器/">
        </link>
        <updated>2020-07-23T20:34:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="为什么要自建dns服务器">为什么要自建dns服务器</h1>
<p>作为一个时常访问github的公民，却因为一些你懂得的原因，无法访问raw.githubusercontent.com这一域名，有的时候连github都无法访问，比较苦恼。刚好手里有一台闲置的学生云服务器，于是便有了自建dns服务的想法。<br>
作为一个编程小白，最简单的方法便是用docker容器部署应用了，经过一段时间的寻找，终于找到了<a href="https://github.com/AdguardTeam/AdGuardHome">AdGuard Home</a>这一在github开源的免费应用，它不仅可以一键搭建自己的dns服务器，还可以自定义dns规则，设置广告过滤，于是，折腾之旅开始。</p>
<h1 id="安装adguard-home">安装Adguard Home</h1>
<p>我用的是Debian 9 x64系统，在腾讯云上，首先安装依赖项</p>
<pre><code class="language-Plain">apt-get install sudo nano bind9-host
</code></pre>
<p>下载 Adguard Home</p>
<pre><code class="language-Plain">wget https://static.adguard.com/adguardhome/release/AdGuardHome_linux_amd64.tar.gz
tar xvf AdGuardHome_linux_amd64.tar.gz
cd AdGuardHome
</code></pre>
<p>执行安装命令</p>
<pre><code class="language-Plain">sudo ./AdGuardHome -s install
</code></pre>
<p>运行AdGuardHome</p>
<pre><code class="language-Plain">./AdGuardHome -s start
</code></pre>
<p>验证是否运行成功</p>
<pre><code class="language-Plain">host doubleclick.net 127.0.0.1
</code></pre>
<p>若出现以下信息，则运行成功</p>
<pre><code class="language-Plain">Using domain server:
Name: 127.0.0.1
Address: 127.0.0.1#53
Aliases:

Host doubleclick.net not found: 3(NXDOMAIN)
</code></pre>
<h1 id="初始化adguard-home">初始化Adguard Home</h1>
<p>在本地浏览器中打开 http://你的服务器ip:3000 （记得开端口） 进行初始化配置，这一初始化配置主要是设置用户名密码以及设置dns服务器的运行地址（选择127.0.0.1就可以了）和端口。这里端口包括两个，一个是管理界面的端口，默认设置为80或者设置其他都可以，另外一个是dns服务器运行的端口，这个最好设置为53，因为很多设备都只支持53端口的dns解析。</p>
<h1 id="配置adguard-home">配置Adguard Home</h1>
<p>本地浏览器中打开http://你的服务器ip:你设置的管理面板端口主界面应该是这样的，正式使用之前，需要完成以下设置<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586523754731.png" alt="" loading="lazy"><br>
UTOOLS1586523754731.png<br>
<strong>设置上游dns服务器</strong><br>
进入界面后，点击设置的dns设置，往下可以找到上游dns服务器的设置，默认的dns服务器在国外，连接不太顺畅，一般选择在国内的纯净dns或者大型dns服务商（污染问题可以通过自定义dns解决），我选的是114.114.114.114和119.29.29.29，并勾选通过同时查询所有上流服务器以使用并行查询加速解析。<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586522362197.png" alt="" loading="lazy"><br>
UTOOLS1586522362197.png<br>
然后检测dns并应用<br>
<strong>设置白名单</strong><br>
百度ip查询自己的ip地址，并写入。考虑到家庭网络的动态ip可以在后面写入 /8 或者 /16。若自己有多个公网ip，可以添加多个允许的ip，还以加上127.0.0.1(本地地址)，让云服务器访问自己的dns服务<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586522556881.png" alt="" loading="lazy"><br>
<strong>过滤广告</strong><br>
在常规设置中勾选全部项目<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586522666008.png" alt="" loading="lazy"><br>
UTOOLS1586522666008.png<br>
打开过滤器的封锁清单，勾选已经有的地址，并添加以下地址（这一过程会使网页卡顿，耐心等）。但这些规则并不是很适用于国内的广告商，我又加入了以下清单</p>
<ol>
<li>https://raw.githubusercontent.com/cjx82630/cjxlist/master/cjx-annoyance.txt</li>
<li>https://easylist-downloads.adblockplus.org/easylistchina.txt</li>
<li>https://raw.githubusercontent.com/xinggsf/Adblock-Plus-Rule/master/ABP-FX.txt</li>
<li>https://gitee.com/privacy-protection-tools/anti-ad/raw/master/easylist.txt<br>
更多广告过滤规则可见<a href="https://juejin.im/post/5d91666ef265da5b7326d71d">用上这个神器后，广告从此去无忧！(全平台免费支持，无需安装任何客户端软件)</a><br>
设置完成后记得开UDP的53端口（而不是TCP），DNS服务器方可正常使用。因为过滤了很多广告，大大增加了网页浏览的体验。</li>
</ol>
<h1 id="自定义dns规则">自定义DNS规则</h1>
<p>这一功能的存在是我一直使用AdGuard Home的原因，这一功能在官方文档也没有明确的说明，鄙人摸索了一段时间才找到。<br>
打开过滤器中的dns重写，即为自定义dns规则。我们以github.io为例。<br>
使用在服务器中输入</p>
<pre><code class="language-Plain">host github.io
</code></pre>
<p>会出现4个ip地址，分别为 185.199.108.153、 185.199.109.153、 185.199.110.153、 185.199.111.153，这表面github有使用CDN加速服务，有的CDN ip是被屏蔽的，而有的没有。经过不停的测试，只有185.199.109.153这一ip没有被屏蔽，而host解析出来的的最优先域名并不一定是185.199.109.153，这就是为什么有时github.io打不开，但是多刷新几次就打开了。这里我们主动设置github.io解析到185.199.109.153，就可以顺畅地访问了。<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586523375179.png" alt="" loading="lazy"><br>
UTOOLS1586523375179.png<br>
如果无法获得可供访问的ip，可以在此地址搜索域名的绕过CDN真实ip <a href="https://www.ipaddress.com/">IP Address.com</a>。若此ip也被屏蔽，则没有办法访问了，比如谷歌。</p>
<h1 id="更多配置">更多配置</h1>
<p>Adguard home用户界面已经设置的很人性化了，基本上不需要看文档，很多内容摸索界面就摸索出来了，若有需要，请参看<a href="https://github.com/AdguardTeam/AdGuardHome/wiki/Configuration">AdGuard Home - Configuration</a></p>
<h1 id="参考文献">参考文献</h1>
<ol>
<li><a href="https://github.com/AdguardTeam/AdGuardHome/wiki/VPS">Adguard home 官方wiki：在VPSV上搭建Adguard home</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[about]]></title>
        <id>https://jerrywang.top/about/</id>
        <link href="https://jerrywang.top/about/">
        </link>
        <updated>2020-07-23T20:34:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关于本站">🏠 关于本站</h2>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<h2 id="联系我呀">📬 联系我呀</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用google colab实现JuliaGPU加速]]></title>
        <id>https://jerrywang.top/使用google colab实现JuliaGPU加速/</id>
        <link href="https://jerrywang.top/使用google colab实现JuliaGPU加速/">
        </link>
        <updated>2020-07-23T20:34:16.000Z</updated>
        <content type="html"><![CDATA[<p>这篇文章的主要内容来自于 https://discourse.julialang.org/t/julia-on-google-colab-free-gpu-accelerated-shareable-notebooks/15319<br>
本文不过是进行了翻译、整理和一些修改，希望对大家有所帮助。无法正常访问谷歌的可以忽略此帖子。</p>
<ol>
<li>在本地创建 test.txt 文件，写入以下内容</li>
</ol>
<pre><code class="language-Plain">{
  &quot;nbformat&quot;: 4,
  &quot;nbformat_minor&quot;: 0,
  &quot;metadata&quot;: {
    &quot;colab&quot;: {
      &quot;name&quot;: &quot;Julia on Colab.ipynb&quot;,
      &quot;version&quot;: &quot;0.3.2&quot;,
      &quot;provenance&quot;: []
    },
    &quot;kernelspec&quot;: {
      &quot;name&quot;: &quot;julia-1.4&quot;,
      &quot;display_name&quot;: &quot;Julia 1.4&quot;
    },
    &quot;accelerator&quot;: &quot;GPU&quot;
  },
  &quot;cells&quot;: [
    {
      &quot;metadata&quot;: {
        &quot;id&quot;: &quot;oMSuTc3pDlHv&quot;,
        &quot;colab_type&quot;: &quot;code&quot;,
        &quot;colab&quot;: {}
      },
      &quot;cell_type&quot;: &quot;code&quot;,
      &quot;source&quot;: [
        &quot;&quot;
      ],
      &quot;execution_count&quot;: 0,
      &quot;outputs&quot;: []
    }
  ]
}
</code></pre>
<ol>
<li>把test.txt文件后缀改为 .ipynb</li>
<li>打开google colab 上传 test.ipynb<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586186574800.png" alt="" loading="lazy"><br>
UTOOLS1586186574800.png</li>
<li>打开后左下角会出现这样的提示，这意味着虽然设置了julia kernel 但是尚未安装julia，还用的是 python kernel<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586186584386.png" alt="" loading="lazy"><br>
UTOOLS1586186584386.png</li>
<li>与原作者当时发帖不同的是，现在的google colab已经预安装好了CUDA 10.1，因此直接安装julia就可以了。在一个代码行中输入以下命令。</li>
</ol>
<pre><code class="language-Plain">!curl -sSL &quot;https://julialang-s3.julialang.org/bin/linux/x64/1.4/julia-1.4.0-linux-x86_64.tar.gz&quot; -o julia.tar.gz
!tar -xzf julia.tar.gz -C /usr --strip-components 1
!rm -rf julia.tar.gz*
!julia -e 'using Pkg; pkg&quot; up; add IJulia ;  precompile&quot;'
</code></pre>
<p>下载和安装非常快，几分钟就ok了。<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586186600403.png" alt="" loading="lazy"></p>
<ol>
<li>刷新页面，就可以正常使用julia和GPU了</li>
<li>测试一下：安装Currays和BenchmarkTools<br>
运行前会自动下载相关的依赖项，速度很快<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586186621204.png" alt="" loading="lazy"><br>
UTOOLS1586186621204.png<br>
可以看到，GPU加速成功<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586186629314.png" alt="" loading="lazy"><br>
UTOOLS1586186629314.png<br>
随着julia版本的更新，可以自行调换kernel的name和下载julia的链接</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[应用程序融入deepin桌面环境]]></title>
        <id>https://jerrywang.top/应用程序融入deepin桌面环境/</id>
        <link href="https://jerrywang.top/应用程序融入deepin桌面环境/">
        </link>
        <updated>2020-07-23T20:31:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="为什么要融入桌面环境">为什么要融入桌面环境</h1>
<p>一般来说，应用商店安装的软件或者deb包的软件会自动融入桌面环境，融入桌面环境的好处是</p>
<ol>
<li>启动方便：可以直接从启动器启动</li>
<li>方便管理：包括开机自启动、使用代理<br>
然而，我们下载的第三方软件，如果不是以deb包的形式安装(比如appimage、直接的应用执行程序、命令行程序），融入桌面环境存在困难，我们需要自己编写.desktop文件，手动融入桌面环境。</li>
</ol>
<h1 id="desktop文件的位置">.desktop文件的位置</h1>
<p>系统会自动扫描以下位置的.desktop文件，并融入桌面环境。</p>
<ol>
<li>~/.local/share/Application</li>
<li>/user/share/application<br>
为了方便期间，我一般把自己制作的.desktop文件放入~/.local/share/Application，因为这里不需要sudo权限</li>
</ol>
<h1 id="desktop文件的格式">.desktop文件的格式</h1>
<pre><code class="language-Plain">[Desktop Entry]     
Name=XXX    #你想融入的应用的名称
Exec=XXX     #执行的命令
Type=XXX      #一般有Application和Link两种类型，融入应用程序就填Application
………………（更多变量声明是非必须的，暂不说明）
</code></pre>
<h1 id="desktop文件举例">.desktop文件举例</h1>
<h2 id="融入appimage文件">融入appimage文件</h2>
<p>以picgo.appimage为例，它的位置在~/appimageset/picgo.appimage</p>
<pre><code class="language-Plain">[Desktop Entry]
Name=Picgo
Exec=~/appimageset/picgo.appimage
Type=Application
</code></pre>
<h2 id="融入脚本命令">融入脚本命令</h2>
<p>一个脚本，名称为test.sh，位于~/Desktop/test.sh</p>
<pre><code class="language-Plain">[Desktop Entry]
Name=test
Exec=bash ~/Desktop/test.sh
Type=Application
</code></pre>
<h2 id="融入命令行运行程序">融入命令行运行程序</h2>
<p>一个应用，名称为 frpc，只能在命令行终端运行，位于~/Desktop/frpc</p>
<pre><code class="language-Plain">[Desktop Entry]
Name=frpc
Exec=deepin-teminal -x ~/Desktop/frpc
Type=Application
</code></pre>
<p>总结起来我们不难发现，Exec就是相当于在命令行执行的的命令，只是不显示输出和终端罢了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[本地搭建sharelatex协作服务器]]></title>
        <id>https://jerrywang.top/本地搭建sharelatex协作服务器/</id>
        <link href="https://jerrywang.top/本地搭建sharelatex协作服务器/">
        </link>
        <updated>2020-07-23T20:29:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="为什么要本地搭建sharelatex协作web应用">为什么要本地搭建sharelatex协作web应用</h1>
<p>有一个网站，叫做overleaf，是一个非常好用的latex在线编辑网站，集协作、聊天、<strong>latex代码补全</strong>等多种功能为一体的latex写作网站，最重要的是，<strong>debug</strong>比较容易，出现小错误也会强制编译成功，非常适合新手。然而，这个网站的服务器在国外，网络连接不太稳定，科学上网也常常会出现连接中断的情况，很烦。一次偶然的情况下，我发现overleaf居然在github上开源了，而且还可以用docker一键本地部署，于是开始操作起来。</p>
<h1 id="安装docker-ce">安装docker-ce</h1>
<p>dokcer-ce是较新版本的docker，而且是社区版。我的使用的系统是的deepin15.11，也许由于某些问题（我太菜了），我无法正常使用mongo，因此我在使用VMware创建了一个ubuntu server 18.04，在此server上安装docker-ce。<br>
<strong>卸载老版本</strong></p>
<pre><code class="language-Plain">sudo apt-get remove docker docker-engine docker.io
</code></pre>
<p><strong>从apt源安装</strong></p>
<pre><code class="language-Plain">sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
sudo apt-get update
sudo apt-get install docker-ce
</code></pre>
<p>安装好了之后，验证是否安装成功。</p>
<pre><code class="language-Plain">sudo docker -v
</code></pre>
<p><img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586352347164.png" alt="" loading="lazy"><br>
UTOOLS1586352347164.png<br>
这表示安装成功，版本为19.03.8。因为我是在一个单独的虚拟机上跑docker，而且这个虚拟机只跑某一个服务，因此我没有设置docker用户组，直接用sudo权限运行docker。要想设置普通用户使用docker，参见<br>
<a href="https://blog.csdn.net/u013948858/article/details/78429954">【Docker】非root用户加入docker用户组省去sudo （三）</a></p>
<h1 id="安装docker-compose">安装docker-compose</h1>
<p>这是一个协同多个docker容器的工具，而且可以更加容易的设置环境变量。<br>
输入以下代码安装docker-compose 1.25.4（速度较慢）</p>
<pre><code class="language-Plain">curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
</code></pre>
<p>输入以下命令</p>
<pre><code class="language-Plain">docker-compose -v           
</code></pre>
<p>出现以下信息则表示安装成功<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586352886310.png" alt="" loading="lazy"><br>
UTOOLS1586352886310.png</p>
<h1 id="pull-images">pull images</h1>
<p>sharelatex官方的image是不包括完整的textlive的，需要自行安装完整版，这里我找到了其他开发者已经集成texlive-2019完整版的sharelatex，依次输入以下命令</p>
<pre><code class="language-Plain">sudo docker pull mongo
sudo docker pull redis
sudo docker pull flodointhecloud/sharelatex-texlive2019
</code></pre>
<p>完整版texlive的镜像大约9G多，pull下载需要一段时间，国内速度太慢可以选择使用镜像站点，参见<a href="https://blog.csdn.net/whatday/article/details/86770609">docker 设置国内镜像源</a></p>
<h1 id="下载docker-composeyml文件">下载docker-compose.yml文件</h1>
<p>overleaf在github上提供了构建sharelatex的yml文件，下载即可<a href="https://raw.githubusercontent.com/overleaf/overleaf/master/docker-compose.yml">链接</a> （可能打不开，可以自定义域名解析，详见百度）<br>
下载好后修改以下内容</p>
<ol>
<li>container_name改为flodointhecloud/sharelatex-texlive2019</li>
</ol>
<h1 id="运行sharelatex">运行sharelatex</h1>
<p>进入docker-compose.yml所在的目录，输入以下命令</p>
<pre><code class="language-Plain">sudo docker-compose up 
</code></pre>
<p>稍等片刻，就启动成功了。<br>
VMware设置桥接网络，输入虚拟机的ip地址即可进入sharelatex的主页，我这里是http://192.168.1.8/<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586354080411.png" alt="" loading="lazy"><br>
UTOOLS1586354080411.png<br>
输入http://192.168.1.8/launchpad设置第一个管理员，设置完成后输入你的设置信息即可登录成功。<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586354054553.png" alt="" loading="lazy"><br>
UTOOLS1586354054553.png</p>
<h1 id="更多个性化设置">更多个性化设置</h1>
<ol>
<li>设置环境变量：详见<a href="https://github.com/overleaf/overleaf/wiki">overleaf官方wiki</a></li>
<li>通过内网穿透将其放在公网访问</li>
</ol>
<h1 id="参考文献">参考文献</h1>
<p><a href="https://www.jianshu.com/p/83483c35bfcd">ubuntu 18.04 安装docker ce</a><br>
<a href="https://github.com/docker/compose/releases">docker-compose releases页面</a></p>
]]></content>
    </entry>
</feed>