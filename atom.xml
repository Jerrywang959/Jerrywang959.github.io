<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jerrywang.top</id>
    <title>JY Blog</title>
    <updated>2020-08-08T14:23:18.619Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jerrywang.top"/>
    <link rel="self" href="https://jerrywang.top/atom.xml"/>
    <subtitle>分享知识与爱</subtitle>
    <logo>https://jerrywang.top/images/avatar.png</logo>
    <icon>https://jerrywang.top/favicon.ico</icon>
    <rights>All rights reserved 2020, JY Blog</rights>
    <entry>
        <title type="html"><![CDATA[Deb解包修改并再打包]]></title>
        <id>https://jerrywang.top/Deb解包修改并再打包/</id>
        <link href="https://jerrywang.top/Deb解包修改并再打包/">
        </link>
        <updated>2020-08-07T19:10:00.000Z</updated>
        <content type="html"><![CDATA[<p>核心命令</p>
<p>解压出包中的文件到extract目录下</p>
<pre><code class="language-Shell">dpkg -X xxxx.deb ./extract/
</code></pre>
<p>解压出包的控制信息到extract/DEBIAN/下</p>
<pre><code class="language-Shell">dpkg -e xxxx.deb ./extract/DEBIAN/
</code></pre>
<p>对修改后的内容重新进行打包生成deb包</p>
<pre><code class="language-Shell">dpkg-deb -b ./extract/ ./
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deepin使用加密DNS(DOT, DOH)]]></title>
        <id>https://jerrywang.top/Deepin使用加密DNS(DOT, DOH)/</id>
        <link href="https://jerrywang.top/Deepin使用加密DNS(DOT, DOH)/">
        </link>
        <updated>2020-08-06T06:22:00.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[Notion图床工具需求]]></title>
        <id>https://jerrywang.top/Notion图床工具需求/</id>
        <link href="https://jerrywang.top/Notion图床工具需求/">
        </link>
        <updated>2020-08-05T22:54:00.000Z</updated>
        <content type="html"><![CDATA[<p>建议集成到现有的工具中，如utools, picgo等其他工具，而不是做成一个单独的软件。可能用js做会好一点，但我对github上的Notion js轮子的功能不太了解</p>
<h1 id="配置需求">配置需求</h1>
<ol>
<li>个人的token_v2，这个不是永久的，一旦手动退出登录就会失效。但只要不手动推出登录就不会失效。</li>
<li>作为图床的page的url，需要设置页面为公开可读</li>
</ol>
<h1 id="操作步骤">操作步骤</h1>
<ol>
<li>复制图片到粘贴板，用token_v2模拟登录，上传图片到上面设置的公开图床page，并获取图片的亚马逊云地址，如</li>
<li>转化为无token url。在上面的url中， <code>Untitled.png</code> 后面都去掉。然后把 <code>/</code> 替换为 <code>%2F</code>, <code>:</code> 替换为 <code>%3A</code> 。然后再整体的url前面加上 <a href="https://www.notion.so/image/"><code>https://www.notion.so/image/</code></a> 。例如，一个转化后的url为</li>
<li>提供多种格式(markdown, html, url)到粘贴板</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[安装Linuxfirmware]]></title>
        <id>https://jerrywang.top/安装Linuxfirmware/</id>
        <link href="https://jerrywang.top/安装Linuxfirmware/">
        </link>
        <updated>2020-08-01T05:26:00.000Z</updated>
        <content type="html"><![CDATA[<p>核心命令</p>
<pre><code class="language-Shell">1、tar -xavf linux-firmware-20200721.tar.xz         #解压
2、cd linux-firmware-20200721                             #进入目录
3、make check                                                                  #检查固件（小声BB，一检查就是一堆东西no exist）
4、sudo make install                                                      #安装
5、sudo update-initramfs -uk all                              #安装完毕更新内核启动映像
</code></pre>
<h1 id="参考文献">参考文献</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Notion 找到最快的host]]></title>
        <id>https://jerrywang.top/Notion 找到最快的host/</id>
        <link href="https://jerrywang.top/Notion 找到最快的host/">
        </link>
        <updated>2020-07-28T06:56:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="原理">原理</h1>
<h2 id="解析原理">解析原理</h2>
<p>Notion使用cloudflare作为cdn，理论上来说，可以将Notion的域名解析到cloudflare cdn的任意节点。<br>
国内解析的Notion域名在不被污染的情况下只有两个ip，而Cloudflare作为外国的云服务提供商以及各种人对cloudflare cdn的滥用，导致这两个ip并不是在任何情况下都能顺畅地连接。<br>
Cloudflare在全球有180多万个ipv4节点，总是存在一些节点是可以顺畅连接的，将Notion的域名解析到这些ip上，就可以顺畅访问Notion了</p>
<h2 id="筛选原理">筛选原理</h2>
<p>cloudflare在全球有180多万个ipv4节点，如果要遍历测试，会耗费大量的网络资源和硬件资源，因此需要筛选。<br>
ipv4地址有4位，在某种程度上，我们可以认为前三位相同，最后一位不同的ipv4地址具有接近的网络环境。因此，你需要选择你最后一位的幸运数字，从1到255，作为第一步筛选。只取第四位是你的幸运数字的ip地址，这样需要测试的ip地址便从180万减少到六七千。<br>
在这六七千ip地址中，并不是所有地址都可以顺畅访问的，也不是将notion.so域名解析到这些地址都是可以访问的，因此下一步是测试可用于notion.so的ip地址，为了轻量化，我们选择尝试下载Notion主页www.notion.so的html。此次筛选后，会得到1000左右可用的ipv4地址。<br>
最后一步便是正式的测速了。第一个测速的必要时ping的丢包率，把ping50次的丢包率控制到10%以下，便会得到十几个甚至几个ip地址。一般来说，只要ping不丢包就可以了，如果对速度有更高的要求，可以考虑测试不同ip解析下下载Notion的js文件:<br>
<a href="https://www.notion.so/app-4ca8cd21ec209cfc38a6.js">https://www.notion.so/app-4ca8cd21ec209cfc38a6.js</a><br>
不同端的解决方法具体如下</p>
<h1 id="linux">Linux</h1>
<p>克隆下面的储存库或者下载zip，按照具体的说明运行脚本即可</p>
<h1 id="windows">Windows</h1>
<p>ToDo，集成在此储存库中</p>
<h1 id="macos">MacOS</h1>
<p>我没有苹果电脑，希望有想法的大家一起出谋划策。希望直接给此储存库pr</p>
<h1 id="android">Android</h1>
<p>下载一个apk，叫做网络测试(我是在小米应用商店下载的，不充钱也可用，无广告)<br>
<img src="https://www.notion.so/image/https%3A%2F%2Fs3.us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F668fdaec-1129-40c2-a5ce-e8009349cf34%2FScreenshot_2020-08-06-17-37-42-090_com.xiaomi.market.jpg" alt="" loading="lazy"><br>
在ping里面，找到ping设置，设置ping批量的执行次数为50<br>
<img src="https://www.notion.so/image/https%3A%2F%2Fs3.us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F0e30e1ec-2cea-4d7c-a36d-170391844703%2FScreenshot_2020-08-06-17-42-51-007_mellow.cyan.nettool.jpg" alt="" loading="lazy"><br>
然后自己根据文章最开始的原理选择待筛选的ip地址，如果懒得找，可以复制下面文件中的ip地址到手机的粘贴版:<br>
<a href="https://raw.githubusercontent.com/Jerrywang959/Notion-choose-ip/master/src/avaip.txt">https://raw.githubusercontent.com/Jerrywang959/Notion-choose-ip/master/src/avaip.txt</a><br>
进入批量ping的界面，添加地址，把刚才复制的1000多个ip复制粘贴进去，完成添加<br>
<img src="https://www.notion.so/image/https%3A%2F%2Fs3.us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff9b2b769-5abc-4130-8e55-4811d22333d4%2FScreenshot_2020-08-06-17-54-29-513_mellow.cyan.nettool.jpg" alt="" loading="lazy"><br>
然后选择执行，一段时间后，执行完毕。点击右上角的排序可以对结果进行简单排序。任选一个绿色的ip即可作为可用ip。如果没有绿色的ip，可以进去橙色的ip查看详情，丢包率不超过20%都可以用<br>
<img src="https://www.notion.so/image/https%3A%2F%2Fs3.us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F87e43eb7-29b2-428a-bceb-fe4a3a8fa6a8%2FScreenshot_2020-08-06-17-56-51-078_mellow.cyan.nettool.jpg" alt="" loading="lazy"><br>
安卓端改hosts可以使用此软件<br>
<img src="https://www.notion.so/image/https%3A%2F%2Fs3.us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe5d9ab48-3d00-4746-901b-586879b67298%2FScreenshot_2020-08-06-18-10-38-810_com.xiaomi.market.jpg" alt="" loading="lazy"><br>
打开后，添加一个dns或者直接用它的dns，改host需要改3个域名<br>
<img src="https://www.notion.so/image/https%3A%2F%2Fs3.us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F98fbb4a1-9427-451e-9764-5f4c92aa0954%2FScreenshot_2020-08-06-18-11-36-574_cn.rubyfish.dns.client.jpg" alt="" loading="lazy"><br>
其实对于安卓端来说，更好的是注册一个自己的红鱼安全dns，在系统设置里面设置“私人NDS”(或者叫做“安全DNS”)。在自己的红鱼dns里改host。</p>
<h1 id="ios">ios</h1>
<p>我没有ios系统的手机，希望有想法的大家一起出谋划策</p>
<h1 id="to-do">TO-DO</h1>
<h1 id="参考文献">参考文献</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Notion+Gridea搭建博客]]></title>
        <id>https://jerrywang.top/Notion+Gridea搭建博客/</id>
        <link href="https://jerrywang.top/Notion+Gridea搭建博客/">
        </link>
        <updated>2020-07-24T01:46:00.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[云服务器搭建RSSHUB]]></title>
        <id>https://jerrywang.top/云服务器搭建RSSHUB/</id>
        <link href="https://jerrywang.top/云服务器搭建RSSHUB/">
        </link>
        <updated>2020-07-23T20:34:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="rsshub是什么">RSSHUB是什么</h1>
<p>RSSHUB是一个容易操作的自定义rss源的开源应用，集成了很多热门的信息源，可以即时生成自己所需要的rss信息订阅源。<br>
虽然rsshub有提供官方的免费rss源接口，但是更加有效（很多网站反爬）、更加安全（使用自己账号的token更加安全）的是自己在服务器上部署rsshub订阅源。于是我在腾讯学生云服务器上部署了这一应用，具体过程如下。</p>
<h1 id="安装docker-ce和docker-compose">安装docker-ce和docker-compose</h1>
<p>不得不说，docker真的给应用的部署带来了巨大的方便。我用的是Debian 9 系统，依次输入以下的代码安装docker-ce和docker-compose</p>
<pre><code class="language-Plain">sudo apt-get remove docker docker-engine docker.io
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/debian \
   $(lsb_release -cs) \
   stable&quot;
sudo apt-get update
sudo apt-get install docker-ce
curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
</code></pre>
<p>更详细安装内容可见<a href="http://jerrywang.top/2020/04/08/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA-sharelatex-%E5%8D%8F%E4%BD%9C%E6%9C%8D%E5%8A%A1%E5%99%A8/">本地搭建sharelatex协作服务器</a></p>
<h1 id="下载docker-composeyml">下载docker-compose.yml</h1>
<p>文件地址为<a href="https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml">docker-compose.yml</a><br>
运行以下的命令</p>
<pre><code class="language-Plain">wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml
docker-compose up
</code></pre>
<p>此时打开“http://服务器的ip:1200”，若出现rsshub的图标和相关信息，则表示安装成功。<br>
安装成功后，rss订阅源为http://服务器的ip:1200/文档中所说明的路由</p>
<h1 id="我在用的几个路由">我在用的几个路由</h1>
<p>rsshub的文档中提供了很多路由，路由的意思即是对应的rss源的路径，加在rsshub运行地址的后面即可。然而rsshub中有很多路由，并不是所有的我们都用得上，这里我总结一下自己常用的路由。<br>
<strong>微信公众号</strong><br>
微信公众号可谓是相当重要的一个信息获得渠道了。rsshub提供了很多个微信公众号的路由，我目前用的是二十次幂的来源，这个来源理论上包括所有的公众号，还可以通过添加参数输出公众号的全文。<br>
在<a href="https://www.ershicimi.com/">二十次幂的网站</a>查找公众号，如果搜索不到，则可以自主添加。打开公众号的主页，在URL中找到对应的公众号id，例如，CSDN公众号的id为204<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586676723651.png" alt="" loading="lazy"><br>
UTOOLS1586676723651.png<br>
那么，对应的rss订阅源为<code>http://服务器ip:rsshub端口/wechat/ershicimi/204</code>，若想添加为全文输入，则在后面加入<code>?mode=fulltext</code>，即<code>http://服务器ip:rsshub端口/wechat/ershicimi/204?mode=fulltext</code><br>
<strong>微博</strong><br>
我常用的是某个博主的微博，在电脑上打开微博官网，找到某个博主，在URL中找到其id，例如：蔡徐坤的微博id为caizicaixukun。<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1586677728283.png" alt="" loading="lazy"><br>
UTOOLS1586677728283.png<br>
那么，对应的rss订阅源为http://服务器ip:rsshub端口/weibo/user/caizicaixukun/1，后面的1表示输出视频。<br>
<strong>其他</strong><br>
除此之外，我还使用了一些不需要配置具体信息的rss订阅源，相当于通过rsshub爬去信息，具体如下：<br>
切记，在google已经放弃rss当下，使用rss的目的是为了减少被巨量的信息所冲击，添加太多的rss源不利于信息整理。<br>
更多信息的rss源路由，详见<a href="https://docs.rsshub.app/">rsshub官方文档</a>。</p>
<h1 id="参考文献">参考文献</h1>
<ol>
<li><a href="https://www.jianshu.com/p/83483c35bfcd">ubuntu 18.04 安装docker ce</a></li>
<li><a href="https://github.com/docker/compose/releases">docker-compose releases页面</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学生云服务器用来做什么]]></title>
        <id>https://jerrywang.top/学生云服务器用来做什么/</id>
        <link href="https://jerrywang.top/学生云服务器用来做什么/">
        </link>
        <updated>2020-07-23T20:34:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="为什么会考虑这个问题">为什么会考虑这个问题</h1>
<p>严格地说，本人并不是计算机专业的学生，学习了这么多关于计算机的知识纯粹是兴趣使然。一次在计量课上，老师提到了在服务器上进行大规模计算，并且说这将成为一种趋势，对云计算一无所知的我对此突然产生了浓厚的兴趣，从此便一发不可收拾，从对linux存在恐惧到现在用docker部署自己的应用，磕磕绊绊踩了很多坑，不过也算是学了一点东西，稍微有点成就罢了。</p>
<h1 id="用服务器踩过的坑">用服务器踩过的坑</h1>
<p><strong>在线jupyer notebook</strong><br>
搭建jupyter notebook服务器，可以在远程服务器上写代码，不用耗费本地资源，云端同步协作。后来觉得1核的服务器无法写多核并行代码，就放弃了。<br>
<strong>sharelatex在线协作</strong><br>
在远程服务器上和同学一起写latex，后来还是觉得云服务器配置太低，选择了本地虚拟机部署。详见<a href="http://jerrywang.top/2020/04/08/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA-sharelatex-%E5%8D%8F%E4%BD%9C%E6%9C%8D%E5%8A%A1%E5%99%A8/">本地搭建sharelatex写作服务器</a></p>
<h1 id="现在服务器的用途">现在服务器的用途</h1>
<p><strong>自建dns解析服务器</strong><br>
用Adguard Home部署自己的dns解析器，可以自定义过滤规则，一方面可以减少广告，另一方面可以一定程度上防止dns污染（顺利访问github)。参见：<a href="http://jerrywang.top/2020/04/10/%E7%94%A8-Adguard-Home-%E8%87%AA%E5%BB%BA-DNS-%E6%9C%8D%E5%8A%A1%E5%99%A8/">Adguardhome自建dns服务器</a><br>
<strong>自建rsshub订阅源</strong><br>
rss，即Really Simple Syndication，简易信息聚合。在这个信息爆炸的时代，通过自定义rss源来高效地获取自己想访问的信息，rsshub即是这个开源的应用。参见<a href="http://jerrywang.top/2020/04/12/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%90%AD%E5%BB%BA-RSSHUB/">云服务器搭建RSSHUB</a><br>
<strong>自建tt rss阅读web服务器</strong><br>
在建立rss订阅源的基础上，再建立一个rss阅读的开源web应用，支持更加个性化的定制，这样就可以在不深入研究底层代码的情况下最大化个性化自己的需求。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[hello-gridea]]></title>
        <id>https://jerrywang.top/hello-gridea/</id>
        <link href="https://jerrywang.top/hello-gridea/">
        </link>
        <updated>2020-07-23T20:34:33.000Z</updated>
        <content type="html"><![CDATA[<p>👏 欢迎使用 <strong>Gridea</strong> ！<br>
✍️ <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意… …<br>
<a href="https://github.com/getgridea/gridea">Github</a><a href="https://gridea.dev/">Gridea 主页</a><a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝 你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作<br>
🌉 你可以给文章配上精美的封面图和在文章任意位置插入图片<br>
🏷️ 你可以对文章进行标签分组<br>
📋 你可以自定义菜单，甚至可以创建外部链接菜单<br>
💻 你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端<br>
🌎 你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台<br>
💬 你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统<br>
🇬🇧 你可以使用<strong>中文简体</strong>或<strong>英语</strong><br>
🌁 你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力<br>
🖥 你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步<br>
🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃<br>
未来，它一定会成为你离不开的伙伴<br>
尽情发挥你的才华吧！<br>
😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[deepin实现远程桌面控制]]></title>
        <id>https://jerrywang.top/deepin实现远程桌面控制/</id>
        <link href="https://jerrywang.top/deepin实现远程桌面控制/">
        </link>
        <updated>2020-07-23T20:34:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言为什么要远程桌面控制">前言：为什么要远程桌面控制</h1>
<ol>
<li>电脑无法携带或者不方便携带</li>
<li>电脑电池容量太小，无法携带到没有充电的地方，又不想买新的，而通过平板电脑远程访问。（我）<br>
对于远程桌面访问，一开始测试过现有的工具：TeamViewer和向日葵，但是最后都放弃了。因为：</li>
<li>TeamViewer的登录服务器在国内响应不好，平板电脑总（华为M5 pro）是登录不上。</li>
<li>向日葵感觉对linux的优化不够好，或者是宽带太小，买了入门版的还是很卡。<br>
最后测试到了RealVNC，并且折腾成功。</li>
</ol>
<h1 id="安装realvnc-server">安装RealVNC server</h1>
<p>VNC其实算是一个比较古老的远程控制linux桌面的软件，后来因为某些原因分了家（具体我不太清楚）。目前市面上有RealVNC、tiger VNC、X11VNC等VNC软件。没有特殊标示的软件就是Real VNC，而且最开始VNC团队的一部分成员进入了Real VNC，感觉官方性最强，于是选择了这个软件。<br>
安装VNC很简单，直接打开deepin应用商店，搜索VNC，点击安装就可以了，我们要在被控制端控制端安装VNC server，不安装VNC viewer。<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1587187504036.png" alt="" loading="lazy"><br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1587187527703.png" alt="" loading="lazy"></p>
<h3 id="激活vnc">激活VNC</h3>
<p>vnc server并不是免费的软件，需要购买，还好有热心网友分享了激活码，大家可以去评论区找。</p>
<h3 id="设置vnc">设置VNC</h3>
<p>打开vnc server，需要sudo权限，输入密码后，点击右上角三个横杠，选择Options<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1587187549976.png" alt="" loading="lazy"><br>
会看到这个界面<br>
<img src="https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1587187576831.png" alt="" loading="lazy"></p>
<ol>
<li>把Security中的Authrntication改成VNC passwd而不是UNIX passwd（保护你的计算机，防止root密码泄露）</li>
<li>在User &amp; Permissions中点击Add添加用户admin用户（如果只有你一个人用</li>
</ol>
]]></content>
    </entry>
</feed>